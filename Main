Sub CalculerBornes()
    '=========================================================================
    ' VERSION CORRIGÉE AVEC SÉPARATION PAIRS/IMPAIRS ET PLURI-DISTRIBUTION
    '=========================================================================
    
    Dim ws As Worksheet
    Dim wsCalcul As Worksheet
    Dim debugInfo As String
    
    On Error GoTo ErrorHandler
    
    debugInfo = "=== CALCUL DES BORNES ===" & vbCrLf
    
    ' 1. IDENTIFICATION DE LA FEUILLE SOURCE
    '=========================================================================
    Set ws = Nothing
    Dim wsTemp As Worksheet
    
    For Each wsTemp In ThisWorkbook.Worksheets
        If wsTemp.Name <> "Calcul des bornes" Then
            On Error Resume Next
            Dim h1 As String, h4 As String, h6 As String, h7 As String
            h1 = wsTemp.Cells(1, 1).Value
            h4 = wsTemp.Cells(1, 4).Value
            h6 = wsTemp.Cells(1, 6).Value
            h7 = wsTemp.Cells(1, 7).Value
            On Error GoTo ErrorHandler
            
            If (h1 Like "*ournée*" Or h1 Like "*ourn*" Or h1 = "Tournée") And _
               (h4 Like "*uméro*" Or h4 Like "*um*" Or h4 = "Numéro") And _
               (h6 Like "*oie*" Or h6 = "Voie") And _
               (h7 Like "*ommune*" Or h7 = "Commune") Then
                Set ws = wsTemp
                Exit For
            End If
        End If
    Next wsTemp
    
    If ws Is Nothing Then
        MsgBox "Feuille source non trouvée !", vbCritical
        Exit Sub
    End If
    
    debugInfo = debugInfo & "Feuille source: " & ws.Name & vbCrLf
    
    ' 2. CRÉATION DE LA FEUILLE RÉSULTAT
    '=========================================================================
    Application.DisplayAlerts = False
    On Error Resume Next
    ThisWorkbook.Worksheets("Calcul des bornes").Delete
    On Error GoTo ErrorHandler
    Application.DisplayAlerts = True
    
    Set wsCalcul = ThisWorkbook.Worksheets.Add
    wsCalcul.Name = "Calcul des bornes"
    
    ' En-têtes selon les spécifications exactes
    With wsCalcul
        .Cells(1, 1) = "Commune"
        .Cells(1, 2) = "Mot directeur"
        .Cells(1, 3) = "Libelle de voie"
        .Cells(1, 4) = "Ligne 3"
        .Cells(1, 5) = "Numéro de voie (borne)"
        .Cells(1, 6) = "Libelle District"
        .Cells(1, 7) = "Tournée"
        .Cells(1, 8) = "Sécable"
        .Cells(1, 9) = "Samedi"
        
        .Range("A1:I1").Font.Bold = True
        .Range("A1:I1").Interior.Color = RGB(180, 198, 231)
    End With
    
    ' 3. ANALYSE DES DONNÉES ET IDENTIFICATION DES VOIES
    '=========================================================================
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    Dim voiesUniques As Object
    Set voiesUniques = CreateObject("Scripting.Dictionary")
    
    ' Identifier toutes les voies uniques
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        Dim commune As String, voie As String, motDirecteur As String
        commune = Trim(CStr(ws.Cells(i, 7).Value))
        voie = Trim(CStr(ws.Cells(i, 6).Value))
        motDirecteur = Trim(CStr(ws.Cells(i, 5).Value))
        On Error GoTo ErrorHandler
        
        If commune <> "" And voie <> "" Then
            Dim cleVoie As String
            cleVoie = commune & "###" & voie & "###" & motDirecteur
            
            If Not voiesUniques.Exists(cleVoie) Then
                voiesUniques(cleVoie) = True
            End If
        End If
    Next i
    
    debugInfo = debugInfo & "Voies uniques trouvées: " & voiesUniques.Count & vbCrLf
    
    ' 4. TRAITEMENT DE CHAQUE VOIE AVEC LOGIQUE COMPLÈTE
    '=========================================================================
    Dim ligneResultat As Long
    ligneResultat = 2
    
    Dim voiesKeys As Variant
    voiesKeys = voiesUniques.Keys
    
    For i = 0 To UBound(voiesKeys)
        Call TraiterVoieComplete(voiesKeys(i), ws, wsCalcul, ligneResultat)
    Next i
    
    Dim nbResultats As Long
    nbResultats = ligneResultat - 2
    
    ' 5. MISE EN FORME FINALE
    '=========================================================================
    With wsCalcul
        .Columns("A:I").AutoFit
        If nbResultats > 0 Then
            .Range("A1:I" & ligneResultat - 1).Borders.LineStyle = xlContinuous
        End If
        .Range("A1:I1").HorizontalAlignment = xlCenter
        .Range("A1").Select
    End With
    
    debugInfo = debugInfo & "Lignes de résultat générées: " & nbResultats & vbCrLf
    MsgBox debugInfo & vbCrLf & "Calcul terminé avec succès !", vbInformation
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Erreur: " & Err.Description & vbCrLf & debugInfo, vbCritical
End Sub

Sub TraiterVoieComplete(ByVal cleVoie As String, ByRef ws As Worksheet, ByRef wsCalcul As Worksheet, ByRef ligneResultat As Long)
    On Error GoTo ErreurVoie
    
    ' Extraire les informations de la clé
    Dim parts As Variant
    parts = Split(cleVoie, "###")
    If UBound(parts) < 2 Then Exit Sub
    
    Dim commune As String, voie As String, motDirecteur As String
    commune = parts(0)
    voie = parts(1)
    motDirecteur = parts(2)
    
    ' 1. COLLECTER TOUTES LES DONNÉES DE CETTE VOIE
    '=========================================================================
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    ' Dictionnaire pour regrouper par combinaison Tournée|Sécable|Samedi
    Dim groupes As Object
    Set groupes = CreateObject("Scripting.Dictionary")
    
    ' Variables de référence (première ligne trouvée)
    Dim ligne3 As String, libelleDistrict As String
    Dim premiereIteration As Boolean
    premiereIteration = True
    
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        Dim communeLigne As String, voieLigne As String, motDirecteurLigne As String
        communeLigne = Trim(CStr(ws.Cells(i, 7).Value))
        voieLigne = Trim(CStr(ws.Cells(i, 6).Value))
        motDirecteurLigne = Trim(CStr(ws.Cells(i, 5).Value))
        On Error GoTo ErreurVoie
        
        If communeLigne = commune And voieLigne = voie And motDirecteurLigne = motDirecteur Then
            
            ' Récupérer les valeurs de référence à la première itération
            If premiereIteration Then
                On Error Resume Next
                ligne3 = Trim(CStr(ws.Cells(i, 3).Value))
                libelleDistrict = Trim(CStr(ws.Cells(i, 2).Value))
                On Error GoTo ErreurVoie
                premiereIteration = False
            End If
            
            ' Lire les données de distribution
            On Error Resume Next
            Dim tournee As String, secable As String, samedi As String
            tournee = Trim(CStr(ws.Cells(i, 1).Value))
            secable = Trim(CStr(ws.Cells(i, 8).Value))
            samedi = Trim(CStr(ws.Cells(i, 9).Value))
            On Error GoTo ErreurVoie
            
            ' Créer la clé de groupe : Tournée|Sécable|Samedi
            Dim cleGroupe As String
            cleGroupe = tournee & "|" & secable & "|" & samedi
            
            ' Initialiser le groupe s'il n'existe pas
            If Not groupes.Exists(cleGroupe) Then
                Dim nouveauGroupe As Object
                Set nouveauGroupe = CreateObject("Scripting.Dictionary")
                nouveauGroupe("tournee") = tournee
                nouveauGroupe("secable") = secable
                nouveauGroupe("samedi") = samedi
                nouveauGroupe("pairs") = CreateObject("Scripting.Dictionary")
                nouveauGroupe("impairs") = CreateObject("Scripting.Dictionary")
                groupes(cleGroupe) = nouveauGroupe
            End If
            
            ' Ajouter le numéro selon sa parité
            Dim numero As Variant
            numero = ws.Cells(i, 4).Value
            If IsNumeric(numero) And numero > 0 Then
                Dim numInt As Long
                numInt = CLng(numero)
                
                If numInt Mod 2 = 0 Then
                    ' Numéro pair
                    If Not groupes(cleGroupe)("pairs").Exists(numInt) Then
                        groupes(cleGroupe)("pairs")(numInt) = True
                    End If
                Else
                    ' Numéro impair
                    If Not groupes(cleGroupe)("impairs").Exists(numInt) Then
                        groupes(cleGroupe)("impairs")(numInt) = True
                    End If
                End If
            End If
        End If
    Next i
    
    ' 2. DÉTERMINER SI LA VOIE EST COMPLÈTE
    '=========================================================================
    Dim estComplete As Boolean
    estComplete = (groupes.Count = 1) ' Une seule combinaison Tournée|Sécable|Samedi
    
    ' 3. GÉNÉRER LES LIGNES DE RÉSULTAT
    '=========================================================================
    If groupes.Count = 0 Then Exit Sub ' Aucune donnée valide
    
    Dim groupesKeys As Variant
    groupesKeys = groupes.Keys
    
    Dim g As Long
    For g = 0 To UBound(groupesKeys)
        Dim groupeKey As String
        groupeKey = groupesKeys(g)
        
        Dim groupe As Object
        Set groupe = groupes(groupeKey)
        
        Dim tourneeGroupe As String, secableGroupe As String, samediGroupe As String
        tourneeGroupe = groupe("tournee")
        secableGroupe = groupe("secable")
        samediGroupe = groupe("samedi")
        
        If estComplete Then
            ' VOIE COMPLÈTE : Une seule ligne sans borne
            '=============================================================
            With wsCalcul
                .Cells(ligneResultat, 1) = commune
                .Cells(ligneResultat, 2) = motDirecteur
                .Cells(ligneResultat, 3) = voie
                .Cells(ligneResultat, 4) = ligne3
                .Cells(ligneResultat, 5) = "" ' Pas de borne pour voie complète
                .Cells(ligneResultat, 6) = libelleDistrict
                .Cells(ligneResultat, 7) = tourneeGroupe
                .Cells(ligneResultat, 8) = secableGroupe
                .Cells(ligneResultat, 9) = samediGroupe
            End With
            ligneResultat = ligneResultat + 1
            
        Else
            ' VOIE PLURI-DISTRIBUÉE : Bornes séparées pairs/impairs
            '=============================================================
            
            ' Traiter les numéros pairs
            If groupe("pairs").Count > 0 Then
                Dim paitsKeys As Variant
                paitsKeys = groupe("pairs").Keys
                
                Dim minPair As Long, maxPair As Long
                Call TrouverMinMaxArray(paitsKeys, minPair, maxPair)
                
                With wsCalcul
                    .Cells(ligneResultat, 1) = commune
                    .Cells(ligneResultat, 2) = motDirecteur
                    .Cells(ligneResultat, 3) = voie
                    .Cells(ligneResultat, 4) = ligne3
                    .Cells(ligneResultat, 5) = minPair & " → " & maxPair
                    .Cells(ligneResultat, 6) = libelleDistrict
                    .Cells(ligneResultat, 7) = tourneeGroupe
                    .Cells(ligneResultat, 8) = secableGroupe
                    .Cells(ligneResultat, 9) = samediGroupe
                End With
                ligneResultat = ligneResultat + 1
            End If
            
            ' Traiter les numéros impairs
            If groupe("impairs").Count > 0 Then
                Dim impairsKeys As Variant
                impairsKeys = groupe("impairs").Keys
                
                Dim minImpair As Long, maxImpair As Long
                Call TrouverMinMaxArray(impairsKeys, minImpair, maxImpair)
                
                With wsCalcul
                    .Cells(ligneResultat, 1) = commune
                    .Cells(ligneResultat, 2) = motDirecteur
                    .Cells(ligneResultat, 3) = voie
                    .Cells(ligneResultat, 4) = ligne3
                    .Cells(ligneResultat, 5) = minImpair & " → " & maxImpair
                    .Cells(ligneResultat, 6) = libelleDistrict
                    .Cells(ligneResultat, 7) = tourneeGroupe
                    .Cells(ligneResultat, 8) = secableGroupe
                    .Cells(ligneResultat, 9) = samediGroupe
                End With
                ligneResultat = ligneResultat + 1
            End If
        End If
    Next g
    
    Exit Sub
    
ErreurVoie:
    ' Ignorer cette voie en cas d'erreur et continuer
End Sub

Sub TrouverMinMaxArray(ByRef arr As Variant, ByRef minVal As Long, ByRef maxVal As Long)
    If UBound(arr) < 0 Then Exit Sub
    
    minVal = CLng(arr(0))
    maxVal = CLng(arr(0))
    
    Dim i As Long
    For i = 1 To UBound(arr)
        Dim valeur As Long
        valeur = CLng(arr(i))
        If valeur < minVal Then minVal = valeur
        If valeur > maxVal Then maxVal = valeur
    Next i
End Sub
