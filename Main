Sub CalculerBornes()
    '=========================================================================
    ' VERSION CORRIGÉE - ÉVITE LES VRAIS CHEVAUCHEMENTS (même parité)
    ' Créé des plages non-chevauchantes en regroupant les numéros consécutifs
    '=========================================================================
    
    Dim ws As Worksheet
    Dim wsCalcul As Worksheet
    Dim lastRow As Long
    Dim i As Long, j As Long
    Dim ligneResultat As Long
    
    ' 1. IDENTIFICATION DE LA FEUILLE SOURCE
    '=========================================================================
    Set ws = Nothing
    Dim wsTemp As Worksheet
    
    For Each wsTemp In ThisWorkbook.Worksheets
        If wsTemp.Name <> "Calcul des bornes" Then
            Dim h1 As String, h4 As String, h6 As String, h7 As String
            h1 = CellToString(wsTemp.Cells(1, 1))
            h4 = CellToString(wsTemp.Cells(1, 4))
            h6 = CellToString(wsTemp.Cells(1, 6))
            h7 = CellToString(wsTemp.Cells(1, 7))
            
            If (InStr(UCase(h1), "TOURN") > 0) And _
               (InStr(UCase(h4), "NUM") > 0) And _
               (InStr(UCase(h6), "VOIE") > 0) And _
               (InStr(UCase(h7), "COMM") > 0) Then
                Set ws = wsTemp
                Exit For
            End If
        End If
    Next wsTemp
    
    If ws Is Nothing Then
        MsgBox "Feuille source non trouvée !", vbCritical
        Exit Sub
    End If
    
    ' 2. CRÉATION DE LA FEUILLE RÉSULTAT
    '=========================================================================
    Application.DisplayAlerts = False
    Set wsCalcul = Nothing
    For Each wsTemp In ThisWorkbook.Worksheets
        If wsTemp.Name = "Calcul des bornes" Then
            wsTemp.Delete
            Exit For
        End If
    Next wsTemp
    Application.DisplayAlerts = True
    
    Set wsCalcul = ThisWorkbook.Worksheets.Add
    wsCalcul.Name = "Calcul des bornes"
    
    ' En-têtes
    wsCalcul.Cells(1, 1) = "Commune"
    wsCalcul.Cells(1, 2) = "Mot directeur"
    wsCalcul.Cells(1, 3) = "Libelle de voie"
    wsCalcul.Cells(1, 4) = "Ligne 3"
    wsCalcul.Cells(1, 5) = "Numéro de voie (borne)"
    wsCalcul.Cells(1, 6) = "Libelle District"
    wsCalcul.Cells(1, 7) = "Tournée"
    wsCalcul.Cells(1, 8) = "Sécable"
    wsCalcul.Cells(1, 9) = "Samedi"
    
    wsCalcul.Range("A1:I1").Font.Bold = True
    wsCalcul.Range("A1:I1").Interior.Color = RGB(180, 198, 231)
    
    ' 3. TRAITEMENT VOIE PAR VOIE
    '=========================================================================
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).row
    ligneResultat = 2
    
    ' Array pour marquer les voies déjà traitées
    ReDim voiesTraitees(1 To lastRow) As Boolean
    
    ' Parcourir chaque ligne et traiter les voies une par une
    For i = 2 To lastRow
        If Not voiesTraitees(i) Then
            Dim commune As String, voie As String, motDirecteur As String
            Dim ligne3 As String, libelleDistrict As String
            
            commune = CellToString(ws.Cells(i, 7))
            voie = CellToString(ws.Cells(i, 6))
            motDirecteur = CellToString(ws.Cells(i, 5))
            ligne3 = CellToString(ws.Cells(i, 3))
            libelleDistrict = CellToString(ws.Cells(i, 2))
            
            If commune <> "" And voie <> "" Then
                voiesTraitees(i) = True
                Call TraiterVoieSansChevaucher(ws, wsCalcul, commune, voie, motDirecteur, ligne3, libelleDistrict, ligneResultat, voiesTraitees, lastRow)
            End If
        End If
    Next i
    
    ' 4. MISE EN FORME FINALE
    '=========================================================================
    Dim nbResultats As Long
    nbResultats = ligneResultat - 2
    
    With wsCalcul
        .Columns("A:I").AutoFit
        If nbResultats > 0 Then
            .Range("A1:I" & ligneResultat - 1).Borders.LineStyle = xlContinuous
        End If
        .Range("A1:I1").HorizontalAlignment = xlCenter
        .Range("A1").Select
    End With
    
    MsgBox "Calcul terminé !" & vbCrLf & "Lignes générées: " & nbResultats, vbInformation
End Sub

Function CellToString(ByVal cell As Range) As String
    Dim valeur As Variant
    valeur = cell.value
    
    If IsEmpty(valeur) Or IsNull(valeur) Then
        CellToString = ""
    ElseIf IsError(valeur) Then
        CellToString = ""
    Else
        CellToString = Trim(CStr(valeur))
    End If
End Function

Sub TraiterVoieSansChevaucher(ByRef ws As Worksheet, ByRef wsCalcul As Worksheet, _
                              ByVal commune As String, ByVal voie As String, ByVal motDirecteur As String, _
                              ByVal ligne3 As String, ByVal libelleDistrict As String, _
                              ByRef ligneResultat As Long, ByRef voiesTraitees() As Boolean, ByVal lastRow As Long)
    
    ' Collecter toutes les données de la voie avec leur position dans le fichier
    ReDim donneesVoie(1 To 1000, 1 To 5) As Variant
    Dim nbDonnees As Long
    nbDonnees = 0
    
    Dim i As Long
    For i = 2 To lastRow
        Dim communeLigne As String, voieLigne As String
        communeLigne = CellToString(ws.Cells(i, 7))
        voieLigne = CellToString(ws.Cells(i, 6))
        
        If communeLigne = commune And voieLigne = voie Then
            voiesTraitees(i) = True
            
            Dim numero As Variant
            numero = ws.Cells(i, 4).value
            
            If IsNumeric(numero) And numero > 0 Then
                nbDonnees = nbDonnees + 1
                donneesVoie(nbDonnees, 1) = CellToString(ws.Cells(i, 1)) ' Tournée
                donneesVoie(nbDonnees, 2) = CellToString(ws.Cells(i, 8)) ' Sécable
                donneesVoie(nbDonnees, 3) = CellToString(ws.Cells(i, 9)) ' Samedi
                donneesVoie(nbDonnees, 4) = CLng(numero)                 ' Numéro
                donneesVoie(nbDonnees, 5) = i                            ' Ligne source (pour tri stable)
            End If
        End If
    Next i
    
    If nbDonnees = 0 Then Exit Sub
    
    ' Traiter par combinaison complète (pairs ET impairs ensemble)
    Call TraiterParCombinaison(wsCalcul, commune, voie, motDirecteur, ligne3, libelleDistrict, _
                               donneesVoie, nbDonnees, ligneResultat)
End Sub

Sub TraiterParCombinaison(ByRef wsCalcul As Worksheet, ByVal commune As String, ByVal voie As String, _
                          ByVal motDirecteur As String, ByVal ligne3 As String, ByVal libelleDistrict As String, _
                          ByRef donneesVoie As Variant, ByVal nbDonnees As Long, ByRef ligneResultat As Long)
    
    ' Créer un dictionnaire global de tous les numéros existants
    Dim tousLesNumerosExistants As Object
    Set tousLesNumerosExistants = CreateObject("Scripting.Dictionary")
    
    Dim i As Long
    For i = 1 To nbDonnees
        Dim numeroExistant As Long
        numeroExistant = donneesVoie(i, 4)
        If Not tousLesNumerosExistants.Exists(numeroExistant) Then
            tousLesNumerosExistants.Add numeroExistant, True
        End If
    Next i
    
    ' Créer des groupes par combinaison tournée/sécable/samedi
    Dim groupes As Object
    Set groupes = CreateObject("Scripting.Dictionary")
    
    For i = 1 To nbDonnees
        Dim tournee As String, secable As String, samedi As String, numero As Long
        tournee = donneesVoie(i, 1)
        secable = donneesVoie(i, 2)
        samedi = donneesVoie(i, 3)
        numero = donneesVoie(i, 4)
        
        Dim cleCombo As String
        cleCombo = tournee & "|" & secable & "|" & samedi
        
        If Not groupes.Exists(cleCombo) Then
            Dim nouveauGroupe As Object
            Set nouveauGroupe = CreateObject("Scripting.Dictionary")
            nouveauGroupe.Add "tournee", tournee
            nouveauGroupe.Add "secable", secable
            nouveauGroupe.Add "samedi", samedi
            nouveauGroupe.Add "pairs", CreateObject("System.Collections.ArrayList")
            nouveauGroupe.Add "impairs", CreateObject("System.Collections.ArrayList")
            groupes.Add cleCombo, nouveauGroupe
        End If
        
        ' Séparer pairs et impairs
        If numero Mod 2 = 0 Then
            groupes(cleCombo)("pairs").Add numero
        Else
            groupes(cleCombo)("impairs").Add numero
        End If
    Next i
    
    ' Pour chaque combinaison, calculer les bornes pairs et impairs et les combiner
    Dim cleGroupe As Variant
    For Each cleGroupe In groupes.Keys
        Dim groupe As Object
        Set groupe = groupes(cleGroupe)
        
        ' Calculer la borne pour les impairs
        Dim borneImpairs As String
        borneImpairs = CalculerBornePourParite(groupe("impairs"), True, tousLesNumerosExistants)
        
        ' Calculer la borne pour les pairs
        Dim bornePairs As String
        bornePairs = CalculerBornePourParite(groupe("pairs"), False, tousLesNumerosExistants)
        
        ' Combiner les bornes
        Dim borneCombinee As String
        If borneImpairs <> "" And bornePairs <> "" Then
            borneCombinee = borneImpairs & " / " & bornePairs
        ElseIf borneImpairs <> "" Then
            borneCombinee = borneImpairs
        ElseIf bornePairs <> "" Then
            borneCombinee = bornePairs
        Else
            borneCombinee = ""
        End If
        
        ' Écrire la ligne combinée
        If borneCombinee <> "" Then
            wsCalcul.Cells(ligneResultat, 1) = commune
            wsCalcul.Cells(ligneResultat, 2) = motDirecteur
            wsCalcul.Cells(ligneResultat, 3) = voie
            wsCalcul.Cells(ligneResultat, 4) = ligne3
            wsCalcul.Cells(ligneResultat, 5) = borneCombinee
            wsCalcul.Cells(ligneResultat, 6) = libelleDistrict
            wsCalcul.Cells(ligneResultat, 7) = groupe("tournee")
            wsCalcul.Cells(ligneResultat, 8) = groupe("secable")
            wsCalcul.Cells(ligneResultat, 9) = groupe("samedi")
            ligneResultat = ligneResultat + 1
        End If
    Next cleGroupe
End Sub

Function CalculerBornePourParite(ByRef numerosParite As Object, ByVal estImpair As Boolean, _
                                 ByRef tousLesNumerosExistants As Object) As String
    
    If numerosParite.Count = 0 Then
        CalculerBornePourParite = ""
        Exit Function
    End If
    
    ' Éliminer les doublons et convertir en array
    Dim dictTemp As Object
    Set dictTemp = CreateObject("Scripting.Dictionary")
    
    Dim i As Long
    For i = 0 To numerosParite.Count - 1
        Dim numTemp As Long
        numTemp = numerosParite(i)
        If Not dictTemp.Exists(numTemp) Then
            dictTemp.Add numTemp, True
        End If
    Next i
    
    ' Créer l'array final sans doublons
    ReDim arrayNumeros(0 To dictTemp.Count - 1) As Long
    Dim index As Long
    index = 0
    Dim cle As Variant
    For Each cle In dictTemp.Keys
        arrayNumeros(index) = CLng(cle)
        index = index + 1
    Next cle
    
    Call TrierArray(arrayNumeros)
    
    ' Créer le dictionnaire des numéros de cette parité pour cette combinaison
    Dim numerosDeCetteCombinaison As Object
    Set numerosDeCetteCombinaison = CreateObject("Scripting.Dictionary")
    For i = 0 To UBound(arrayNumeros)
        numerosDeCetteCombinaison.Add arrayNumeros(i), True
    Next i
    
    ' Créer des plages continues
    Dim plages As String
    plages = ""
    
    If UBound(arrayNumeros) >= 0 Then
        Dim debut As Long, fin As Long
        debut = arrayNumeros(0)
        fin = arrayNumeros(0)
        
        For i = 1 To UBound(arrayNumeros)
            Dim numeroActuel As Long
            numeroActuel = arrayNumeros(i)
            
            ' Vérifier s'il y a conflit avec d'autres combinaisons
            Dim doitCouper As Boolean
            doitCouper = False
            
            Dim numeroIntermediaire As Long
            For numeroIntermediaire = fin + 2 To numeroActuel - 2 Step 2
                If tousLesNumerosExistants.Exists(numeroIntermediaire) And _
                   Not numerosDeCetteCombinaison.Exists(numeroIntermediaire) Then
                    doitCouper = True
                    Exit For
                End If
            Next numeroIntermediaire
            
            If doitCouper Then
                ' Finaliser la plage actuelle
                If plages <> "" Then plages = plages & ", "
                If debut = fin Then
                    plages = plages & CStr(debut)
                Else
                    plages = plages & debut & " à " & fin
                End If
                
                ' Commencer une nouvelle plage
                debut = numeroActuel
                fin = numeroActuel
            Else
                ' Continuer la plage
                fin = numeroActuel
            End If
        Next i
        
        ' Ajouter la dernière plage
        If plages <> "" Then plages = plages & ", "
        If debut = fin Then
            plages = plages & CStr(debut)
        Else
            plages = plages & debut & " à " & fin
        End If
    End If
    
    CalculerBornePourParite = plages
End Function

Sub TrierTableau(ByRef tableau As Variant, ByVal nbElements As Long)
    ' Tri à bulles simple sur la colonne 4 (numéro)
    Dim i As Long, j As Long
    Dim temp1 As Variant, temp2 As Variant, temp3 As Variant, temp4 As Variant
    
    For i = 1 To nbElements - 1
        For j = 1 To nbElements - i
            If tableau(j, 4) > tableau(j + 1, 4) Then
                ' Échanger les lignes
                temp1 = tableau(j, 1)
                temp2 = tableau(j, 2)
                temp3 = tableau(j, 3)
                temp4 = tableau(j, 4)
                
                tableau(j, 1) = tableau(j + 1, 1)
                tableau(j, 2) = tableau(j + 1, 2)
                tableau(j, 3) = tableau(j + 1, 3)
                tableau(j, 4) = tableau(j + 1, 4)
                
                tableau(j + 1, 1) = temp1
                tableau(j + 1, 2) = temp2
                tableau(j + 1, 3) = temp3
                tableau(j + 1, 4) = temp4
            End If
        Next j
    Next i
End Sub

Sub TrierArray(ByRef arr As Variant)
    ' Tri à bulles pour array simple
    Dim i As Long, j As Long, temp As Long
    
    For i = LBound(arr) To UBound(arr) - 1
        For j = LBound(arr) To UBound(arr) - 1
            If arr(j) > arr(j + 1) Then
                temp = arr(j)
                arr(j) = arr(j + 1)
                arr(j + 1) = temp
            End If
        Next j
    Next i
End Sub
