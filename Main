Sub CalculerBornes()
    '=========================================================================
    ' VERSION CORRIGÉE - GESTION DES CELLULES VIDES
    '=========================================================================
    
    Dim ws As Worksheet
    Dim wsCalcul As Worksheet
    
    On Error GoTo ErrorHandler
    
    ' 1. IDENTIFICATION DE LA FEUILLE SOURCE
    '=========================================================================
    Set ws = Nothing
    Dim wsTemp As Worksheet
    
    For Each wsTemp In ThisWorkbook.Worksheets
        If wsTemp.Name <> "Calcul des bornes" Then
            On Error Resume Next
            Dim h1 As String, h4 As String, h6 As String, h7 As String
            h1 = wsTemp.Cells(1, 1).Value
            h4 = wsTemp.Cells(1, 4).Value
            h6 = wsTemp.Cells(1, 6).Value
            h7 = wsTemp.Cells(1, 7).Value
            On Error GoTo ErrorHandler
            
            If (h1 Like "*ournée*" Or h1 Like "*ourn*" Or h1 = "Tournée") And _
               (h4 Like "*uméro*" Or h4 Like "*um*" Or h4 = "Numéro") And _
               (h6 Like "*oie*" Or h6 = "Voie") And _
               (h7 Like "*ommune*" Or h7 = "Commune") Then
                Set ws = wsTemp
                Exit For
            End If
        End If
    Next wsTemp
    
    If ws Is Nothing Then
        MsgBox "Feuille source non trouvée !", vbCritical
        Exit Sub
    End If
    
    ' 2. CRÉATION DE LA FEUILLE RÉSULTAT
    '=========================================================================
    Application.DisplayAlerts = False
    On Error Resume Next
    ThisWorkbook.Worksheets("Calcul des bornes").Delete
    On Error GoTo ErrorHandler
    Application.DisplayAlerts = True
    
    Set wsCalcul = ThisWorkbook.Worksheets.Add
    wsCalcul.Name = "Calcul des bornes"
    
    ' En-têtes selon les spécifications exactes
    With wsCalcul
        .Cells(1, 1) = "Commune"
        .Cells(1, 2) = "Mot directeur"
        .Cells(1, 3) = "Libelle de voie"
        .Cells(1, 4) = "Ligne 3"
        .Cells(1, 5) = "Numéro de voie (borne)"
        .Cells(1, 6) = "Libelle District"
        .Cells(1, 7) = "Tournée"
        .Cells(1, 8) = "Sécable"
        .Cells(1, 9) = "Samedi"
        
        .Range("A1:I1").Font.Bold = True
        .Range("A1:I1").Interior.Color = RGB(180, 198, 231)
    End With
    
    ' 3. ANALYSE DES DONNÉES ET IDENTIFICATION DES VOIES
    '=========================================================================
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    Dim voiesUniques As Object
    Set voiesUniques = CreateObject("Scripting.Dictionary")
    
    ' Identifier toutes les voies uniques (sans tenir compte du mot directeur vide)
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        Dim commune As String, voie As String, motDirecteur As String
        commune = SafeStr(ws.Cells(i, 7).Value)
        voie = SafeStr(ws.Cells(i, 6).Value)
        motDirecteur = SafeStr(ws.Cells(i, 5).Value)
        On Error GoTo ErrorHandler
        
        If commune <> "" And voie <> "" Then
            Dim cleVoie As String
            ' Utiliser commune + voie seulement (mot directeur peut être vide)
            cleVoie = commune & "###" & voie
            
            If Not voiesUniques.Exists(cleVoie) Then
                voiesUniques(cleVoie) = True
            End If
        End If
    Next i
    
    ' 4. TRAITEMENT DE CHAQUE VOIE
    '=========================================================================
    Dim ligneResultat As Long
    ligneResultat = 2
    
    Dim voiesKeys As Variant
    voiesKeys = voiesUniques.Keys
    
    For i = 0 To UBound(voiesKeys)
        Call TraiterVoieCorrigee(voiesKeys(i), ws, wsCalcul, ligneResultat)
    Next i
    
    Dim nbResultats As Long
    nbResultats = ligneResultat - 2
    
    ' 5. MISE EN FORME FINALE
    '=========================================================================
    With wsCalcul
        .Columns("A:I").AutoFit
        If nbResultats > 0 Then
            .Range("A1:I" & ligneResultat - 1).Borders.LineStyle = xlContinuous
        End If
        .Range("A1:I1").HorizontalAlignment = xlCenter
        .Range("A1").Select
    End With
    
    ' Message de confirmation
    MsgBox "Calcul terminé avec succès !" & vbCrLf & _
           "Voies uniques: " & voiesUniques.Count & vbCrLf & _
           "Lignes générées: " & nbResultats, vbInformation
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Erreur: " & Err.Description, vbCritical
End Sub

Function SafeStr(ByVal cellValue As Variant) As String
    ' Fonction pour lire les cellules de manière sécurisée
    On Error Resume Next
    If IsEmpty(cellValue) Or IsNull(cellValue) Or VarType(cellValue) = vbError Then
        SafeStr = ""
    Else
        SafeStr = Trim(CStr(cellValue))
        If SafeStr = "0" Then SafeStr = ""
    End If
    On Error GoTo 0
End Function

Sub TraiterVoieCorrigee(ByVal cleVoie As String, ByRef ws As Worksheet, ByRef wsCalcul As Worksheet, ByRef ligneResultat As Long)
    On Error GoTo ErreurVoie
    
    ' Extraire commune et voie de la clé
    Dim parts As Variant
    parts = Split(cleVoie, "###")
    If UBound(parts) < 1 Then Exit Sub
    
    Dim commune As String, voie As String
    commune = parts(0)
    voie = parts(1)
    
    ' Collecter toutes les données de cette voie
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    ' Dictionnaire pour regrouper par combinaison Tournée|Sécable|Samedi
    Dim groupes As Object
    Set groupes = CreateObject("Scripting.Dictionary")
    
    ' Variables de référence (première ligne trouvée)
    Dim motDirecteur As String, ligne3 As String, libelleDistrict As String
    Dim premiereIteration As Boolean
    premiereIteration = True
    
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        Dim communeLigne As String, voieLigne As String
        communeLigne = SafeStr(ws.Cells(i, 7).Value)
        voieLigne = SafeStr(ws.Cells(i, 6).Value)
        On Error GoTo ErreurVoie
        
        ' Correspondance basée uniquement sur commune et voie
        If communeLigne = commune And voieLigne = voie Then
            
            ' Récupérer les valeurs de référence à la première itération
            If premiereIteration Then
                motDirecteur = SafeStr(ws.Cells(i, 5).Value)
                ligne3 = SafeStr(ws.Cells(i, 3).Value)
                libelleDistrict = SafeStr(ws.Cells(i, 2).Value)
                premiereIteration = False
            End If
            
            ' Lire les données de distribution
            Dim tournee As String, secable As String, samedi As String
            tournee = SafeStr(ws.Cells(i, 1).Value)
            secable = SafeStr(ws.Cells(i, 8).Value)
            samedi = SafeStr(ws.Cells(i, 9).Value)
            
            ' Créer la clé de groupe : Tournée|Sécable|Samedi
            Dim cleGroupe As String
            cleGroupe = tournee & "|" & secable & "|" & samedi
            
            ' Initialiser le groupe s'il n'existe pas
            If Not groupes.Exists(cleGroupe) Then
                Dim nouveauGroupe As Object
                Set nouveauGroupe = CreateObject("Scripting.Dictionary")
                nouveauGroupe("tournee") = tournee
                nouveauGroupe("secable") = secable
                nouveauGroupe("samedi") = samedi
                nouveauGroupe("pairs") = New Collection
                nouveauGroupe("impairs") = New Collection
                groupes(cleGroupe) = nouveauGroupe
            End If
            
            ' Ajouter le numéro selon sa parité
            Dim numero As Variant
            numero = ws.Cells(i, 4).Value
            If IsNumeric(numero) And numero <> "" And numero > 0 Then
                Dim numInt As Long
                numInt = CLng(numero)
                
                If numInt Mod 2 = 0 Then
                    ' Numéro pair
                    groupes(cleGroupe)("pairs").Add numInt
                Else
                    ' Numéro impair
                    groupes(cleGroupe)("impairs").Add numInt
                End If
            End If
        End If
    Next i
    
    ' Générer les lignes de résultat si des groupes ont été créés
    If groupes.Count > 0 Then
        ' Déterminer si la voie est complète
        Dim estComplete As Boolean
        estComplete = (groupes.Count = 1) ' Une seule combinaison Tournée|Sécable|Samedi
        
        Dim groupesKeys As Variant
        groupesKeys = groupes.Keys
        
        Dim g As Long
        For g = 0 To UBound(groupesKeys)
            Dim groupeKey As String
            groupeKey = groupesKeys(g)
            
            Dim groupe As Object
            Set groupe = groupes(groupeKey)
            
            Dim tourneeGroupe As String, secableGroupe As String, samediGroupe As String
            tourneeGroupe = groupe("tournee")
            secableGroupe = groupe("secable")
            samediGroupe = groupe("samedi")
            
            If estComplete And groupe("pairs").Count = 0 And groupe("impairs").Count = 0 Then
                ' VOIE COMPLÈTE SANS NUMÉROS : Une ligne sans borne
                '=============================================================
                With wsCalcul
                    .Cells(ligneResultat, 1) = commune
                    .Cells(ligneResultat, 2) = motDirecteur
                    .Cells(ligneResultat, 3) = voie
                    .Cells(ligneResultat, 4) = ligne3
                    .Cells(ligneResultat, 5) = "" ' Pas de borne
                    .Cells(ligneResultat, 6) = libelleDistrict
                    .Cells(ligneResultat, 7) = tourneeGroupe
                    .Cells(ligneResultat, 8) = secableGroupe
                    .Cells(ligneResultat, 9) = samediGroupe
                End With
                ligneResultat = ligneResultat + 1
                
            ElseIf estComplete And (groupe("pairs").Count > 0 Or groupe("impairs").Count > 0) Then
                ' VOIE COMPLÈTE AVEC NUMÉROS : Une ligne sans borne
                '=============================================================
                With wsCalcul
                    .Cells(ligneResultat, 1) = commune
                    .Cells(ligneResultat, 2) = motDirecteur
                    .Cells(ligneResultat, 3) = voie
                    .Cells(ligneResultat, 4) = ligne3
                    .Cells(ligneResultat, 5) = "" ' Pas de borne pour voie complète
                    .Cells(ligneResultat, 6) = libelleDistrict
                    .Cells(ligneResultat, 7) = tourneeGroupe
                    .Cells(ligneResultat, 8) = secableGroupe
                    .Cells(ligneResultat, 9) = samediGroupe
                End With
                ligneResultat = ligneResultat + 1
                
            Else
                ' VOIE PLURI-DISTRIBUÉE : Bornes séparées pairs/impairs
                '=============================================================
                
                ' Traiter les numéros pairs
                If groupe("pairs").Count > 0 Then
                    Dim minPair As Long, maxPair As Long
                    Call TrouverMinMaxCollection(groupe("pairs"), minPair, maxPair)
                    
                    With wsCalcul
                        .Cells(ligneResultat, 1) = commune
                        .Cells(ligneResultat, 2) = motDirecteur
                        .Cells(ligneResultat, 3) = voie
                        .Cells(ligneResultat, 4) = ligne3
                        .Cells(ligneResultat, 5) = minPair & " → " & maxPair
                        .Cells(ligneResultat, 6) = libelleDistrict
                        .Cells(ligneResultat, 7) = tourneeGroupe
                        .Cells(ligneResultat, 8) = secableGroupe
                        .Cells(ligneResultat, 9) = samediGroupe
                    End With
                    ligneResultat = ligneResultat + 1
                End If
                
                ' Traiter les numéros impairs
                If groupe("impairs").Count > 0 Then
                    Dim minImpair As Long, maxImpair As Long
                    Call TrouverMinMaxCollection(groupe("impairs"), minImpair, maxImpair)
                    
                    With wsCalcul
                        .Cells(ligneResultat, 1) = commune
                        .Cells(ligneResultat, 2) = motDirecteur
                        .Cells(ligneResultat, 3) = voie
                        .Cells(ligneResultat, 4) = ligne3
                        .Cells(ligneResultat, 5) = minImpair & " → " & maxImpair
                        .Cells(ligneResultat, 6) = libelleDistrict
                        .Cells(ligneResultat, 7) = tourneeGroupe
                        .Cells(ligneResultat, 8) = secableGroupe
                        .Cells(ligneResultat, 9) = samediGroupe
                    End With
                    ligneResultat = ligneResultat + 1
                End If
                
                ' Si aucun numéro valide dans ce groupe, créer quand même une ligne
                If groupe("pairs").Count = 0 And groupe("impairs").Count = 0 Then
                    With wsCalcul
                        .Cells(ligneResultat, 1) = commune
                        .Cells(ligneResultat, 2) = motDirecteur
                        .Cells(ligneResultat, 3) = voie
                        .Cells(ligneResultat, 4) = ligne3
                        .Cells(ligneResultat, 5) = "" ' Pas de numéros
                        .Cells(ligneResultat, 6) = libelleDistrict
                        .Cells(ligneResultat, 7) = tourneeGroupe
                        .Cells(ligneResultat, 8) = secableGroupe
                        .Cells(ligneResultat, 9) = samediGroupe
                    End With
                    ligneResultat = ligneResultat + 1
                End If
            End If
        Next g
    End If
    
    Exit Sub
    
ErreurVoie:
    ' Ignorer cette voie en cas d'erreur et continuer
End Sub

Sub TrouverMinMaxCollection(ByRef col As Collection, ByRef minVal As Long, ByRef maxVal As Long)
    If col.Count = 0 Then Exit Sub
    
    minVal = col(1)
    maxVal = col(1)
    
    Dim i As Long
    For i = 2 To col.Count
        If col(i) < minVal Then minVal = col(i)
        If col(i) > maxVal Then maxVal = col(i)
    Next i
End Sub
