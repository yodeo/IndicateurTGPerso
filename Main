Sub CalculerBornes()
    '=========================================================================
    ' VERSION ULTRA-SIMPLIFIÉE - ÉVITE LES DICTIONNAIRES COMPLEXES
    '=========================================================================
    
    Dim ws As Worksheet
    Dim wsCalcul As Worksheet
    Dim lastRow As Long
    Dim i As Long, j As Long
    Dim ligneResultat As Long
    
    ' 1. IDENTIFICATION DE LA FEUILLE SOURCE
    '=========================================================================
    Set ws = Nothing
    Dim wsTemp As Worksheet
    
    For Each wsTemp in ThisWorkbook.Worksheets
        If wsTemp.Name <> "Calcul des bornes" Then
            Dim h1 As String, h4 As String, h6 As String, h7 As String
            h1 = CellToString(wsTemp.Cells(1, 1))
            h4 = CellToString(wsTemp.Cells(1, 4))
            h6 = CellToString(wsTemp.Cells(1, 6))
            h7 = CellToString(wsTemp.Cells(1, 7))
            
            If (InStr(UCase(h1), "TOURN") > 0) And _
               (InStr(UCase(h4), "NUM") > 0) And _
               (InStr(UCase(h6), "VOIE") > 0) And _
               (InStr(UCase(h7), "COMM") > 0) Then
                Set ws = wsTemp
                Exit For
            End If
        End If
    Next wsTemp
    
    If ws Is Nothing Then
        MsgBox "Feuille source non trouvée !", vbCritical
        Exit Sub
    End If
    
    ' 2. CRÉATION DE LA FEUILLE RÉSULTAT
    '=========================================================================
    Application.DisplayAlerts = False
    Set wsCalcul = Nothing
    For Each wsTemp In ThisWorkbook.Worksheets
        If wsTemp.Name = "Calcul des bornes" Then
            wsTemp.Delete
            Exit For
        End If
    Next wsTemp
    Application.DisplayAlerts = True
    
    Set wsCalcul = ThisWorkbook.Worksheets.Add
    wsCalcul.Name = "Calcul des bornes"
    
    ' En-têtes
    wsCalcul.Cells(1, 1) = "Commune"
    wsCalcul.Cells(1, 2) = "Mot directeur"
    wsCalcul.Cells(1, 3) = "Libelle de voie"
    wsCalcul.Cells(1, 4) = "Ligne 3"
    wsCalcul.Cells(1, 5) = "Numéro de voie (borne)"
    wsCalcul.Cells(1, 6) = "Libelle District"
    wsCalcul.Cells(1, 7) = "Tournée"
    wsCalcul.Cells(1, 8) = "Sécable"
    wsCalcul.Cells(1, 9) = "Samedi"
    
    wsCalcul.Range("A1:I1").Font.Bold = True
    wsCalcul.Range("A1:I1").Interior.Color = RGB(180, 198, 231)
    
    ' 3. TRAITEMENT DIRECT LIGNE PAR LIGNE
    '=========================================================================
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    ligneResultat = 2
    
    ' Array pour marquer les voies déjà traitées
    ReDim voiesTraitees(1 To lastRow) As Boolean
    
    ' Parcourir chaque ligne et traiter les voies une par une
    For i = 2 To lastRow
        If Not voiesTraitees(i) Then
            ' Lire les données de cette ligne
            Dim commune As String, voie As String, motDirecteur As String
            Dim ligne3 As String, libelleDistrict As String
            
            commune = CellToString(ws.Cells(i, 7))
            voie = CellToString(ws.Cells(i, 6))
            motDirecteur = CellToString(ws.Cells(i, 5))
            ligne3 = CellToString(ws.Cells(i, 3))
            libelleDistrict = CellToString(ws.Cells(i, 2))
            
            ' Ignorer si pas de commune ou voie
            If commune <> "" And voie <> "" Then
                ' Marquer cette ligne comme traitée
                voiesTraitees(i) = True
                
                ' Traiter cette voie spécifique
                Call TraiterVoieSimple(ws, wsCalcul, commune, voie, motDirecteur, ligne3, libelleDistrict, ligneResultat, voiesTraitees, lastRow)
            End If
        End If
    Next i
    
    ' 4. MISE EN FORME FINALE
    '=========================================================================
    Dim nbResultats As Long
    nbResultats = ligneResultat - 2
    
    With wsCalcul
        .Columns("A:I").AutoFit
        If nbResultats > 0 Then
            .Range("A1:I" & ligneResultat - 1).Borders.LineStyle = xlContinuous
        End If
        .Range("A1:I1").HorizontalAlignment = xlCenter
        .Range("A1").Select
    End With
    
    MsgBox "Calcul terminé !" & vbCrLf & "Lignes générées: " & nbResultats, vbInformation
End Sub

Function CellToString(ByVal cell As Range) As String
    ' Fonction ultra-simple pour convertir une cellule en string
    Dim valeur As Variant
    valeur = cell.Value
    
    If IsEmpty(valeur) Or IsNull(valeur) Then
        CellToString = ""
    ElseIf IsError(valeur) Then
        CellToString = ""
    Else
        CellToString = Trim(CStr(valeur))
    End If
End Function

Sub TraiterVoieSimple(ByRef ws As Worksheet, ByRef wsCalcul As Worksheet, _
                      ByVal commune As String, ByVal voie As String, ByVal motDirecteur As String, _
                      ByVal ligne3 As String, ByVal libelleDistrict As String, _
                      ByRef ligneResultat As Long, ByRef voiesTraitees() As Boolean, ByVal lastRow As Long)
    
    ' Arrays simples pour collecter les données
    ReDim tournees(1 To 100) As String
    ReDim secables(1 To 100) As String
    ReDim samedis(1 To 100) As String
    ReDim numeros(1 To 1000) As Long
    ReDim combinaisons(1 To 1000) As String
    
    Dim nbTournees As Long, nbSecables As Long, nbSamedis As Long, nbNumeros As Long
    nbTournees = 0
    nbSecables = 0
    nbSamedis = 0
    nbNumeros = 0
    
    ' Parcourir toutes les lignes pour cette voie
    Dim i As Long
    For i = 2 To lastRow
        Dim communeLigne As String, voieLigne As String
        communeLigne = CellToString(ws.Cells(i, 7))
        voieLigne = CellToString(ws.Cells(i, 6))
        
        If communeLigne = commune And voieLigne = voie Then
            ' Marquer cette ligne comme traitée
            voiesTraitees(i) = True
            
            ' Collecter les données uniques
            Dim tournee As String, secable As String, samedi As String
            tournee = CellToString(ws.Cells(i, 1))
            secable = CellToString(ws.Cells(i, 8))
            samedi = CellToString(ws.Cells(i, 9))
            
            ' Ajouter tournée si nouvelle
            If tournee <> "" Then
                Dim trouveTournee As Boolean
                trouveTournee = False
                Dim j As Long
                For j = 1 To nbTournees
                    If tournees(j) = tournee Then
                        trouveTournee = True
                        Exit For
                    End If
                Next j
                If Not trouveTournee Then
                    nbTournees = nbTournees + 1
                    tournees(nbTournees) = tournee
                End If
            End If
            
            ' Ajouter sécable si nouveau
            If secable <> "" Then
                Dim trouveSecable As Boolean
                trouveSecable = False
                For j = 1 To nbSecables
                    If secables(j) = secable Then
                        trouveSecable = True
                        Exit For
                    End If
                Next j
                If Not trouveSecable Then
                    nbSecables = nbSecables + 1
                    secables(nbSecables) = secable
                End If
            End If
            
            ' Ajouter samedi si nouveau
            If samedi <> "" Then
                Dim trouveSamedi As Boolean
                trouveSamedi = False
                For j = 1 To nbSamedis
                    If samedis(j) = samedi Then
                        trouveSamedi = True
                        Exit For
                    End If
                Next j
                If Not trouveSamedi Then
                    nbSamedis = nbSamedis + 1
                    samedis(nbSamedis) = samedi
                End If
            End If
            
            ' Collecter les numéros avec leur combinaison
            Dim numero As Variant
            numero = ws.Cells(i, 4).Value
            If IsNumeric(numero) And numero > 0 Then
                nbNumeros = nbNumeros + 1
                numeros(nbNumeros) = CLng(numero)
                combinaisons(nbNumeros) = tournee & "|" & secable & "|" & samedi
            End If
        End If
    Next i
    
    ' Déterminer si la voie est complète
    Dim estComplete As Boolean
    estComplete = (nbTournees <= 1) And (nbSecables <= 1) And (nbSamedis <= 1)
    
    ' Récupérer les valeurs de référence
    Dim tourneeRef As String, secableRef As String, samediRef As String
    tourneeRef = ""
    secableRef = ""
    samediRef = ""
    
    If nbTournees > 0 Then tourneeRef = tournees(1)
    If nbSecables > 0 Then secableRef = secables(1)
    If nbSamedis > 0 Then samediRef = samedis(1)
    
    If estComplete Then
        ' VOIE COMPLÈTE : Une ligne sans borne
        wsCalcul.Cells(ligneResultat, 1) = commune
        wsCalcul.Cells(ligneResultat, 2) = motDirecteur
        wsCalcul.Cells(ligneResultat, 3) = voie
        wsCalcul.Cells(ligneResultat, 4) = ligne3
        wsCalcul.Cells(ligneResultat, 5) = "" ' Pas de borne
        wsCalcul.Cells(ligneResultat, 6) = libelleDistrict
        wsCalcul.Cells(ligneResultat, 7) = tourneeRef
        wsCalcul.Cells(ligneResultat, 8) = secableRef
        wsCalcul.Cells(ligneResultat, 9) = samediRef
        ligneResultat = ligneResultat + 1
        
    Else
        ' VOIE PLURI-DISTRIBUÉE : Traiter par combinaison unique
        ' Créer un array des combinaisons uniques QUI ONT DES NUMÉROS
        ReDim combinaisonsUniques(1 To 100) As String
        Dim nbCombinaisonsUniques As Long
        nbCombinaisonsUniques = 0
        
        ' Ne collecter que les combinaisons qui ont des numéros
        For i = 1 To nbNumeros
            Dim combinaison As String
            combinaison = combinaisons(i)
            
            ' Vérifier si cette combinaison existe déjà
            Dim trouveComb As Boolean
            trouveComb = False
            For j = 1 To nbCombinaisonsUniques
                If combinaisonsUniques(j) = combinaison Then
                    trouveComb = True
                    Exit For
                End If
            Next j
            
            If Not trouveComb Then
                nbCombinaisonsUniques = nbCombinaisonsUniques + 1
                combinaisonsUniques(nbCombinaisonsUniques) = combinaison
            End If
        Next i
        
        ' Traiter chaque combinaison unique (on sait qu'elles ont toutes des numéros)
        For i = 1 To nbCombinaisonsUniques
            combinaison = combinaisonsUniques(i)
            
            ' Extraire tournée, sécable, samedi de la combinaison
            Dim parts() As String
            parts = Split(combinaison, "|")
            Dim tourneeCombo As String, secableCombo As String, samediCombo As String
            tourneeCombo = ""
            secableCombo = ""
            samediCombo = ""
            
            If UBound(parts) >= 0 Then tourneeCombo = parts(0)
            If UBound(parts) >= 1 Then secableCombo = parts(1)
            If UBound(parts) >= 2 Then samediCombo = parts(2)
            
            ' Collecter les numéros de cette combinaison
            ReDim numerosPairs(1 To 1000) As Long
            ReDim numerosImpairs(1 To 1000) As Long
            Dim nbPairs As Long, nbImpairs As Long
            nbPairs = 0
            nbImpairs = 0
            
            For j = 1 To nbNumeros
                If combinaisons(j) = combinaison Then
                    If numeros(j) Mod 2 = 0 Then
                        nbPairs = nbPairs + 1
                        numerosPairs(nbPairs) = numeros(j)
                    Else
                        nbImpairs = nbImpairs + 1
                        numerosImpairs(nbImpairs) = numeros(j)
                    End If
                End If
            Next j
            
            ' Calculer les bornes pairs et impairs
            Dim bornePairs As String, borneImpairs As String
            bornePairs = ""
            borneImpairs = ""
            
            ' Calculer borne des pairs
            If nbPairs > 0 Then
                Dim minPair As Long, maxPair As Long
                minPair = numerosPairs(1)
                maxPair = numerosPairs(1)
                
                For j = 2 To nbPairs
                    If numerosPairs(j) < minPair Then minPair = numerosPairs(j)
                    If numerosPairs(j) > maxPair Then maxPair = numerosPairs(j)
                Next j
                
                ' Si un seul numéro, pas de flèche
                If minPair = maxPair Then
                    bornePairs = CStr(minPair)
                Else
                    bornePairs = minPair & " à " & maxPair
                End If
            End If
            
            ' Calculer borne des impairs
            If nbImpairs > 0 Then
                Dim minImpair As Long, maxImpair As Long
                minImpair = numerosImpairs(1)
                maxImpair = numerosImpairs(1)
                
                For j = 2 To nbImpairs
                    If numerosImpairs(j) < minImpair Then minImpair = numerosImpairs(j)
                    If numerosImpairs(j) > maxImpair Then maxImpair = numerosImpairs(j)
                Next j
                
                ' Si un seul numéro, pas de flèche
                If minImpair = maxImpair Then
                    borneImpairs = CStr(minImpair)
                Else
                    borneImpairs = minImpair & " à " & maxImpair
                End If
            End If
            
            ' Construire la borne combinée : "impairs / pairs"
            Dim borneCombinee As String
            If borneImpairs <> "" And bornePairs <> "" Then
                borneCombinee = borneImpairs & " / " & bornePairs
            ElseIf borneImpairs <> "" Then
                borneCombinee = borneImpairs
            ElseIf bornePairs <> "" Then
                borneCombinee = bornePairs
            Else
                borneCombinee = ""
            End If
            
            ' Écrire la ligne seulement si on a une borne
            If borneCombinee <> "" Then
                wsCalcul.Cells(ligneResultat, 1) = commune
                wsCalcul.Cells(ligneResultat, 2) = motDirecteur
                wsCalcul.Cells(ligneResultat, 3) = voie
                wsCalcul.Cells(ligneResultat, 4) = ligne3
                wsCalcul.Cells(ligneResultat, 5) = borneCombinee
                wsCalcul.Cells(ligneResultat, 6) = libelleDistrict
                wsCalcul.Cells(ligneResultat, 7) = tourneeCombo
                wsCalcul.Cells(ligneResultat, 8) = secableCombo
                wsCalcul.Cells(ligneResultat, 9) = samediCombo
                ligneResultat = ligneResultat + 1
            End If
            
            End If
                ' Cas spécial : combinaison sans numéros valides
                wsCalcul.Cells(ligneResultat, 1) = commune
                wsCalcul.Cells(ligneResultat, 2) = motDirecteur
                wsCalcul.Cells(ligneResultat, 3) = voie
                wsCalcul.Cells(ligneResultat, 4) = ligne3
                wsCalcul.Cells(ligneResultat, 5) = ""
                wsCalcul.Cells(ligneResultat, 6) = libelleDistrict
                wsCalcul.Cells(ligneResultat, 7) = tourneeCombo
                wsCalcul.Cells(ligneResultat, 8) = secableCombo
                wsCalcul.Cells(ligneResultat, 9) = samediCombo
                ligneResultat = ligneResultat + 1
        Next i
    End If
End Sub
