Sub CalculerBornes()
    '=========================================================================
    ' MACRO CALCUL DES BORNES - INDICATEUR TG
    ' Version corrigée avec gestion d'erreur détaillée
    ' Date: Juin 2025
    '=========================================================================
    
    Dim ws As Worksheet
    Dim wsCalcul As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim currentRow As Long
    Dim ligneErreur As Long
    
    ' Dictionnaires pour regrouper les données
    Dim voiesData As Object
    Set voiesData = CreateObject("Scripting.Dictionary")
    
    ' Variables pour la ligne en cours
    Dim commune As String, motDirecteur As String, voie As String, ligne3 As String
    Dim numero As Variant, libelleDistrict As String, tournee As String
    Dim secable As String, samedi As String
    Dim cleVoie As String
    
    On Error GoTo ErrorHandler
    
    ' 1. IDENTIFICATION DE LA FEUILLE SOURCE
    '=========================================================================
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Set ws = Nothing
    Dim wsTemp As Worksheet
    
    For Each wsTemp In ThisWorkbook.Worksheets
        If wsTemp.Name <> "Calcul des bornes" Then
            ' Vérifier si cette feuille contient les bonnes colonnes
            On Error Resume Next
            If UCase(Trim(wsTemp.Cells(1, 1).Value)) = "TOURNÉE" And _
               UCase(Trim(wsTemp.Cells(1, 4).Value)) = "NUMÉRO" And _
               UCase(Trim(wsTemp.Cells(1, 6).Value)) = "VOIE" Then
                Set ws = wsTemp
                On Error GoTo ErrorHandler
                Exit For
            End If
            On Error GoTo ErrorHandler
        End If
    Next wsTemp
    
    If ws Is Nothing Then
        MsgBox "Impossible de trouver la feuille source avec les colonnes requises." & vbCrLf & _
               "Vérifiez que votre feuille contient les colonnes : Tournée, Numéro, Voie", vbCritical
        GoTo CleanUp
    End If
    
    ' 2. SUPPRESSION ET CRÉATION DE LA FEUILLE "Calcul des bornes"
    '=========================================================================
    On Error Resume Next
    ThisWorkbook.Worksheets("Calcul des bornes").Delete
    On Error GoTo ErrorHandler
    
    Set wsCalcul = ThisWorkbook.Worksheets.Add
    wsCalcul.Name = "Calcul des bornes"
    
    ' Créer les en-têtes
    With wsCalcul
        .Cells(1, 1).Value = "Commune"
        .Cells(1, 2).Value = "Mot directeur"
        .Cells(1, 3).Value = "Libelle de voie"
        .Cells(1, 4).Value = "Ligne 3"
        .Cells(1, 5).Value = "Numéro de voie (borne)"
        .Cells(1, 6).Value = "Libelle District"
        .Cells(1, 7).Value = "Tournée"
        .Cells(1, 8).Value = "Sécable"
        .Cells(1, 9).Value = "Samedi"
        
        ' Mise en forme des en-têtes
        .Range("A1:I1").Font.Bold = True
        .Range("A1:I1").Interior.Color = RGB(180, 198, 231)
        .Range("A1:I1").Borders.LineStyle = xlContinuous
    End With
    
    ' 3. LECTURE ET REGROUPEMENT DES DONNÉES
    '=========================================================================
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    If lastRow < 2 Then
        MsgBox "Aucune donnée trouvée dans la feuille source.", vbExclamation
        GoTo CleanUp
    End If
    
    ' Parcourir toutes les lignes de données
    For i = 2 To lastRow
        ligneErreur = i ' Pour localiser l'erreur
        
        On Error Resume Next
        ' Lire les données avec protection contre les erreurs
        tournee = ""
        If Not IsEmpty(ws.Cells(i, 1).Value) Then tournee = Trim(CStr(ws.Cells(i, 1).Value))
        
        libelleDistrict = ""
        If Not IsEmpty(ws.Cells(i, 2).Value) Then libelleDistrict = Trim(CStr(ws.Cells(i, 2).Value))
        
        ligne3 = ""
        If Not IsEmpty(ws.Cells(i, 3).Value) Then ligne3 = Trim(CStr(ws.Cells(i, 3).Value))
        
        numero = ws.Cells(i, 4).Value
        
        motDirecteur = ""
        If Not IsEmpty(ws.Cells(i, 5).Value) Then motDirecteur = Trim(CStr(ws.Cells(i, 5).Value))
        
        voie = ""
        If Not IsEmpty(ws.Cells(i, 6).Value) Then voie = Trim(CStr(ws.Cells(i, 6).Value))
        
        commune = ""
        If Not IsEmpty(ws.Cells(i, 7).Value) Then commune = Trim(CStr(ws.Cells(i, 7).Value))
        
        secable = ""
        If Not IsEmpty(ws.Cells(i, 8).Value) Then secable = Trim(CStr(ws.Cells(i, 8).Value))
        
        samedi = ""
        If Not IsEmpty(ws.Cells(i, 9).Value) Then samedi = Trim(CStr(ws.Cells(i, 9).Value))
        
        On Error GoTo ErrorHandler
        
        ' Ignorer les lignes sans données essentielles
        If commune = "" Or voie = "" Or tournee = "" Then GoTo NextRow
        
        ' Créer la clé unique pour la voie
        cleVoie = commune & "|" & voie & "|" & motDirecteur
        
        ' Initialiser le dictionnaire pour cette voie si nécessaire
        If Not voiesData.Exists(cleVoie) Then
            Dim nouvelleVoie As Object
            Set nouvelleVoie = CreateObject("Scripting.Dictionary")
            
            nouvelleVoie.Add "commune", commune
            nouvelleVoie.Add "motDirecteur", motDirecteur
            nouvelleVoie.Add "voie", voie
            nouvelleVoie.Add "ligne3", ligne3
            nouvelleVoie.Add "libelleDistrict", libelleDistrict
            nouvelleVoie.Add "tournees", CreateObject("Scripting.Dictionary")
            nouvelleVoie.Add "secables", CreateObject("Scripting.Dictionary")
            nouvelleVoie.Add "samedis", CreateObject("Scripting.Dictionary")
            nouvelleVoie.Add "numeros", CreateObject("Scripting.Dictionary")
            
            voiesData.Add cleVoie, nouvelleVoie
        End If
        
        ' Ajouter les valeurs aux ensembles
        Dim voieActuelle As Object
        Set voieActuelle = voiesData(cleVoie)
        
        If tournee <> "" And Not voieActuelle("tournees").Exists(tournee) Then
            voieActuelle("tournees").Add tournee, True
        End If
        
        If secable <> "" And Not voieActuelle("secables").Exists(secable) Then
            voieActuelle("secables").Add secable, True
        End If
        
        If samedi <> "" And Not voieActuelle("samedis").Exists(samedi) Then
            voieActuelle("samedis").Add samedi, True
        End If
        
        ' Ajouter le numéro s'il est valide
        If IsNumeric(numero) And numero <> "" Then
            Dim numInt As Long
            numInt = CLng(numero)
            If numInt > 0 Then
                Dim combinaisonNum As String
                combinaisonNum = tournee & "|" & secable & "|" & samedi
                If Not voieActuelle("numeros").Exists(numInt) Then
                    voieActuelle("numeros").Add numInt, combinaisonNum
                End If
            End If
        End If
        
NextRow:
    Next i
    
    ' 4. TRAITEMENT ET ÉCRITURE DES RÉSULTATS
    '=========================================================================
    currentRow = 2
    
    Dim cleVoieArray As Variant
    If voiesData.Count > 0 Then
        cleVoieArray = voiesData.Keys
    Else
        MsgBox "Aucune donnée valide trouvée pour le traitement.", vbExclamation
        GoTo CleanUp
    End If
    
    Dim j As Long
    For j = 0 To UBound(cleVoieArray)
        ligneErreur = j ' Pour localiser l'erreur
        
        Dim voieInfo As Object
        Set voieInfo = voiesData(cleVoieArray(j))
        
        commune = voieInfo("commune")
        motDirecteur = voieInfo("motDirecteur")
        voie = voieInfo("voie")
        ligne3 = voieInfo("ligne3")
        libelleDistrict = voieInfo("libelleDistrict")
        
        ' Déterminer si la voie est "complète"
        Dim estComplete As Boolean
        estComplete = (voieInfo("tournees").Count = 1) And _
                     (voieInfo("secables").Count <= 1) And _
                     (voieInfo("samedis").Count <= 1)
        
        If estComplete Then
            ' 4A. VOIE COMPLÈTE - Une seule ligne sans borne
            Dim tourneeUnique As String, secableUnique As String, samediUnique As String
            
            ' Récupérer les valeurs uniques
            If voieInfo("tournees").Count > 0 Then
                Dim tourneesKeys As Variant
                tourneesKeys = voieInfo("tournees").Keys
                tourneeUnique = tourneesKeys(0)
            End If
            
            secableUnique = ""
            If voieInfo("secables").Count > 0 Then
                Dim secablesKeys As Variant
                secablesKeys = voieInfo("secables").Keys
                secableUnique = secablesKeys(0)
            End If
            
            samediUnique = ""
            If voieInfo("samedis").Count > 0 Then
                Dim samedisKeys As Variant
                samedisKeys = voieInfo("samedis").Keys
                samediUnique = samedisKeys(0)
            End If
            
            ' Écrire la ligne
            With wsCalcul
                .Cells(currentRow, 1).Value = commune
                .Cells(currentRow, 2).Value = motDirecteur
                .Cells(currentRow, 3).Value = voie
                .Cells(currentRow, 4).Value = ligne3
                .Cells(currentRow, 5).Value = "" ' Pas de borne pour voie complète
                .Cells(currentRow, 6).Value = libelleDistrict
                .Cells(currentRow, 7).Value = tourneeUnique
                .Cells(currentRow, 8).Value = secableUnique
                .Cells(currentRow, 9).Value = samediUnique
            End With
            currentRow = currentRow + 1
            
        Else
            ' 4B. VOIE INCOMPLÈTE - Calcul des bornes par parité
            ' Grouper les numéros par combinaison Tournée|Sécable|Samedi
            Dim groupes As Object
            Set groupes = CreateObject("Scripting.Dictionary")
            
            If voieInfo("numeros").Count > 0 Then
                Dim numerosKeys As Variant
                numerosKeys = voieInfo("numeros").Keys
                
                Dim k As Long
                For k = 0 To UBound(numerosKeys)
                    Dim numCurrent As Long
                    numCurrent = numerosKeys(k)
                    Dim combinaison As String
                    combinaison = voieInfo("numeros")(numCurrent)
                    
                    If Not groupes.Exists(combinaison) Then
                        Dim nouveauGroupe As Object
                        Set nouveauGroupe = CreateObject("Scripting.Dictionary")
                        nouveauGroupe.Add "pairs", CreateObject("Scripting.Dictionary")
                        nouveauGroupe.Add "impairs", CreateObject("Scripting.Dictionary")
                        groupes.Add combinaison, nouveauGroupe
                    End If
                    
                    ' Séparer pairs et impairs
                    If numCurrent Mod 2 = 0 Then
                        If Not groupes(combinaison)("pairs").Exists(numCurrent) Then
                            groupes(combinaison)("pairs").Add numCurrent, True
                        End If
                    Else
                        If Not groupes(combinaison)("impairs").Exists(numCurrent) Then
                            groupes(combinaison)("impairs").Add numCurrent, True
                        End If
                    End If
                Next k
                
                ' Traiter chaque groupe
                If groupes.Count > 0 Then
                    Dim groupesKeys As Variant
                    groupesKeys = groupes.Keys
                    
                    For k = 0 To UBound(groupesKeys)
                        Dim groupeKey As String
                        groupeKey = groupesKeys(k)
                        
                        ' Extraire Tournée, Sécable, Samedi
                        Dim parts As Variant
                        parts = Split(groupeKey, "|")
                        Dim tourneeGroupe As String, secableGroupe As String, samediGroupe As String
                        
                        tourneeGroupe = ""
                        If UBound(parts) >= 0 Then tourneeGroupe = parts(0)
                        
                        secableGroupe = ""
                        If UBound(parts) >= 1 Then secableGroupe = parts(1)
                        
                        samediGroupe = ""
                        If UBound(parts) >= 2 Then samediGroupe = parts(2)
                        
                        ' Traiter les pairs
                        If groupes(groupeKey)("pairs").Count > 0 Then
                            Dim paitsKeys As Variant
                            paitsKeys = groupes(groupeKey)("pairs").Keys
                            
                            Dim minPair As Long, maxPair As Long
                            minPair = paitsKeys(0)
                            maxPair = paitsKeys(0)
                            
                            Dim m As Long
                            For m = 1 To UBound(paitsKeys)
                                If paitsKeys(m) < minPair Then minPair = paitsKeys(m)
                                If paitsKeys(m) > maxPair Then maxPair = paitsKeys(m)
                            Next m
                            
                            ' Écrire la ligne pour les pairs
                            With wsCalcul
                                .Cells(currentRow, 1).Value = commune
                                .Cells(currentRow, 2).Value = motDirecteur
                                .Cells(currentRow, 3).Value = voie
                                .Cells(currentRow, 4).Value = ligne3
                                .Cells(currentRow, 5).Value = minPair & " → " & maxPair
                                .Cells(currentRow, 6).Value = libelleDistrict
                                .Cells(currentRow, 7).Value = tourneeGroupe
                                .Cells(currentRow, 8).Value = secableGroupe
                                .Cells(currentRow, 9).Value = samediGroupe
                            End With
                            currentRow = currentRow + 1
                        End If
                        
                        ' Traiter les impairs
                        If groupes(groupeKey)("impairs").Count > 0 Then
                            Dim impairsKeys As Variant
                            impairsKeys = groupes(groupeKey)("impairs").Keys
                            
                            Dim minImpair As Long, maxImpair As Long
                            minImpair = impairsKeys(0)
                            maxImpair = impairsKeys(0)
                            
                            For m = 1 To UBound(impairsKeys)
                                If impairsKeys(m) < minImpair Then minImpair = impairsKeys(m)
                                If impairsKeys(m) > maxImpair Then maxImpair = impairsKeys(m)
                            Next m
                            
                            ' Écrire la ligne pour les impairs
                            With wsCalcul
                                .Cells(currentRow, 1).Value = commune
                                .Cells(currentRow, 2).Value = motDirecteur
                                .Cells(currentRow, 3).Value = voie
                                .Cells(currentRow, 4).Value = ligne3
                                .Cells(currentRow, 5).Value = minImpair & " → " & maxImpair
                                .Cells(currentRow, 6).Value = libelleDistrict
                                .Cells(currentRow, 7).Value = tourneeGroupe
                                .Cells(currentRow, 8).Value = secableGroupe
                                .Cells(currentRow, 9).Value = samediGroupe
                            End With
                            currentRow = currentRow + 1
                        End If
                    Next k
                End If
            End If
        End If
    Next j
    
    ' 5. MISE EN FORME FINALE
    '=========================================================================
    With wsCalcul
        .Columns("A:I").AutoFit
        .Range("A1:I" & (currentRow - 1)).Borders.LineStyle = xlContinuous
        .Range("A1:I1").HorizontalAlignment = xlCenter
        .Range("A1").Select
    End With
    
    ' Message de confirmation
    MsgBox "Calcul des bornes terminé avec succès !" & vbCrLf & _
           "Nombre de voies traitées : " & voiesData.Count & vbCrLf & _
           "Lignes générées : " & (currentRow - 2), vbInformation
    
    GoTo CleanUp
    
ErrorHandler:
    Dim msgErreur As String
    msgErreur = "Erreur lors du calcul des bornes :" & vbCrLf & _
                "Description : " & Err.Description & vbCrLf & _
                "Numéro d'erreur : " & Err.Number & vbCrLf & _
                "Ligne de données en cours : " & ligneErreur
    
    MsgBox msgErreur, vbCritical
    
CleanUp:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub
