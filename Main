Sub CalculerBornes()
    '=========================================================================
    ' VERSION ULTRA-RAPIDE - TABLEAUX TRIÉS SANS DICTIONNAIRES
    '=========================================================================
    
    Dim ws As Worksheet
    Dim wsCalcul As Worksheet
    Dim lastRow As Long
    Dim dataArray As Variant
    Dim resultArray() As Variant
    Dim resultCount As Long
    
    ' Optimisations maximales
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    ' 1. IDENTIFICATION RAPIDE DE LA FEUILLE SOURCE
    '=========================================================================
    Set ws = Nothing
    Dim wsTemp As Worksheet
    
    For Each wsTemp In ThisWorkbook.Worksheets
        If wsTemp.Name <> "Calcul des bornes" Then
            If InStr(UCase(wsTemp.Cells(1, 1).Value), "TOURN") > 0 And _
               InStr(UCase(wsTemp.Cells(1, 4).Value), "NUM") > 0 And _
               InStr(UCase(wsTemp.Cells(1, 6).Value), "VOIE") > 0 Then
                Set ws = wsTemp
                Exit For
            End If
        End If
    Next wsTemp
    
    If ws Is Nothing Then
        MsgBox "Feuille source non trouvée !", vbCritical
        GoTo CleanUp
    End If
    
    ' 2. LECTURE MASSIVE ET PRÉ-TRAITEMENT
    '=========================================================================
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    If lastRow < 2 Then GoTo CleanUp
    
    ' Lire toutes les données d'un coup
    dataArray = ws.Range("A2:I" & lastRow).Value
    
    ' Structure de données optimisée : [cleVoie, tournee, secable, samedi, numero, ligne_source]
    Dim processedData() As Variant
    Dim processedCount As Long
    ReDim processedData(1 To UBound(dataArray, 1), 1 To 10)
    processedCount = 0
    
    ' Pré-traitement en une passe : filtrer et structurer
    Dim i As Long
    For i = 1 To UBound(dataArray, 1)
        Dim commune As String, voie As String
        commune = CleanString(dataArray(i, 7))  ' Commune
        voie = CleanString(dataArray(i, 6))     ' Voie
        
        If commune <> "" And voie <> "" Then
            Dim numero As Variant
            numero = dataArray(i, 4)
            
            If IsNumeric(numero) And numero > 0 Then
                processedCount = processedCount + 1
                processedData(processedCount, 1) = commune & "|" & voie  ' cleVoie
                processedData(processedCount, 2) = CleanString(dataArray(i, 1))  ' tournee
                processedData(processedCount, 3) = CleanString(dataArray(i, 8))  ' secable
                processedData(processedCount, 4) = CleanString(dataArray(i, 9))  ' samedi
                processedData(processedCount, 5) = CLng(numero)  ' numero
                processedData(processedCount, 6) = i  ' ligne source pour récupérer autres infos
                processedData(processedCount, 7) = CleanString(dataArray(i, 5))  ' motDirecteur
                processedData(processedCount, 8) = CleanString(dataArray(i, 3))  ' ligne3
                processedData(processedCount, 9) = CleanString(dataArray(i, 2))  ' libelleDistrict
                processedData(processedCount, 10) = processedData(processedCount, 2) & "|" & processedData(processedCount, 3) & "|" & processedData(processedCount, 4)  ' combinaison
            End If
        End If
    Next i
    
    If processedCount = 0 Then GoTo CleanUp
    
    ' Redimensionner aux données réelles
    ReDim Preserve processedData(1 To processedCount, 1 To 10)
    
    ' 3. TRI RAPIDE POUR REGROUPEMENT
    '=========================================================================
    ' Tri par cleVoie puis par combinaison
    Call TriRapideMultiColonne(processedData, 1, processedCount, 1, 10)
    
    ' 4. CRÉATION DE LA FEUILLE RÉSULTAT
    '=========================================================================
    For Each wsTemp In ThisWorkbook.Worksheets
        If wsTemp.Name = "Calcul des bornes" Then
            wsTemp.Delete
            Exit For
        End If
    Next wsTemp
    
    Set wsCalcul = ThisWorkbook.Worksheets.Add
    wsCalcul.Name = "Calcul des bornes"
    
    ' En-têtes en une fois
    wsCalcul.Range("A1:I1").Value = Array("Commune", "Mot directeur", "Libelle de voie", "Ligne 3", "Numéro de voie (borne)", "Libelle District", "Tournée", "Sécable", "Samedi")
    wsCalcul.Range("A1:I1").Font.Bold = True
    wsCalcul.Range("A1:I1").Interior.Color = RGB(180, 198, 231)
    
    ' 5. TRAITEMENT ULTRA-RAPIDE DES VOIES GROUPÉES
    '=========================================================================
    ReDim resultArray(1 To processedCount, 1 To 9)  ' Maximum possible
    resultCount = 0
    
    i = 1
    Do While i <= processedCount
        Dim voieActuelle As String
        voieActuelle = processedData(i, 1)
        
        ' Trouver la fin de cette voie
        Dim finVoie As Long
        finVoie = i
        Do While finVoie < processedCount And processedData(finVoie + 1, 1) = voieActuelle
            finVoie = finVoie + 1
        Loop
        
        ' Traiter cette voie (de i à finVoie)
        Call TraiterVoieUltraRapide(processedData, i, finVoie, resultArray, resultCount)
        
        i = finVoie + 1
    Loop
    
    ' 6. ÉCRITURE MASSIVE FINALE
    '=========================================================================
    If resultCount > 0 Then
        ReDim Preserve resultArray(1 To resultCount, 1 To 9)
        wsCalcul.Range("A2").Resize(resultCount, 9).Value = resultArray
        
        ' Mise en forme rapide
        With wsCalcul
            .Columns("A:I").AutoFit
            .Range("A1:I" & (resultCount + 1)).Borders.LineStyle = xlContinuous
            .Range("A1:I1").HorizontalAlignment = xlCenter
            .Range("A1").Select
        End With
    End If
    
    MsgBox "Calcul terminé ultra-rapide !" & vbCrLf & "Lignes générées: " & resultCount, vbInformation
    
CleanUp:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Application.DisplayAlerts = True
End Sub

Function CleanString(ByVal val As Variant) As String
    ' Fonction ultra-optimisée
    If IsEmpty(val) Or IsNull(val) Or IsError(val) Then
        CleanString = ""
    Else
        CleanString = Trim(CStr(val))
    End If
End Function

Sub TraiterVoieUltraRapide(ByRef data As Variant, ByVal debut As Long, ByVal fin As Long, ByRef resultArray As Variant, ByRef resultCount As Long)
    ' Traitement optimisé d'une voie déjà triée
    
    ' Compter les combinaisons uniques
    Dim combinaisonsUniques() As String
    Dim nbCombos As Long
    ReDim combinaisonsUniques(1 To fin - debut + 1)
    nbCombos = 0
    
    Dim i As Long
    For i = debut To fin
        Dim combo As String
        combo = data(i, 10)  ' combinaison précalculée
        
        ' Vérifier si nouvelle combinaison
        Dim estNouveau As Boolean
        estNouveau = True
        Dim j As Long
        For j = 1 To nbCombos
            If combinaisonsUniques(j) = combo Then
                estNouveau = False
                Exit For
            End If
        Next j
        
        If estNouveau Then
            nbCombos = nbCombos + 1
            combinaisonsUniques(nbCombos) = combo
        End If
    Next i
    
    ' Voie complète = une seule combinaison
    Dim estComplete As Boolean
    estComplete = (nbCombos = 1)
    
    ' Traiter chaque combinaison
    For j = 1 To nbCombos
        Dim comboActuelle As String
        comboActuelle = combinaisonsUniques(j)
        
        ' Collecter les numéros de cette combinaison
        Dim pairs() As Long, impairs() As Long
        Dim nbPairs As Long, nbImpairs As Long
        ReDim pairs(1 To fin - debut + 1)
        ReDim impairs(1 To fin - debut + 1)
        nbPairs = 0
        nbImpairs = 0
        
        ' Variables de référence (première ligne trouvée)
        Dim refTournee As String, refSecable As String, refSamedi As String
        Dim refCommune As String, refVoie As String, refMotDirecteur As String
        Dim refLigne3 As String, refLibelleDistrict As String
        Dim premierTrouve As Boolean
        premierTrouve = False
        
        For i = debut To fin
            If data(i, 10) = comboActuelle Then
                ' Récupérer les infos de référence
                If Not premierTrouve Then
                    refTournee = data(i, 2)
                    refSecable = data(i, 3)
                    refSamedi = data(i, 4)
                    refCommune = Split(data(i, 1), "|")(0)
                    refVoie = Split(data(i, 1), "|")(1)
                    refMotDirecteur = data(i, 7)
                    refLigne3 = data(i, 8)
                    refLibelleDistrict = data(i, 9)
                    premierTrouve = True
                End If
                
                ' Collecter le numéro selon sa parité
                Dim numero As Long
                numero = data(i, 5)
                If numero Mod 2 = 0 Then
                    nbPairs = nbPairs + 1
                    pairs(nbPairs) = numero
                Else
                    nbImpairs = nbImpairs + 1
                    impairs(nbImpairs) = numero
                End If
            End If
        Next i
        
        ' Calculer les bornes
        Dim bornePairs As String, borneImpairs As String
        bornePairs = ""
        borneImpairs = ""
        
        If nbPairs > 0 Then
            Dim minP As Long, maxP As Long
            Call TrouverMinMaxRapide(pairs, nbPairs, minP, maxP)
            If minP = maxP Then
                bornePairs = CStr(minP)
            Else
                bornePairs = minP & " à " & maxP
            End If
        End If
        
        If nbImpairs > 0 Then
            Dim minI As Long, maxI As Long
            Call TrouverMinMaxRapide(impairs, nbImpairs, minI, maxI)
            If minI = maxI Then
                borneImpairs = CStr(minI)
            Else
                borneImpairs = minI & " à " & maxI
            End If
        End If
        
        ' Construire la borne finale
        Dim borneFinal As String
        If borneImpairs <> "" And bornePairs <> "" Then
            borneFinal = borneImpairs & " / " & bornePairs
        ElseIf borneImpairs <> "" Then
            borneFinal = borneImpairs
        ElseIf bornePairs <> "" Then
            borneFinal = bornePairs
        Else
            borneFinal = ""
        End If
        
        ' Ajouter au résultat si on a une borne
        If borneFinal <> "" Then
            resultCount = resultCount + 1
            resultArray(resultCount, 1) = refCommune
            resultArray(resultCount, 2) = refMotDirecteur
            resultArray(resultCount, 3) = refVoie
            resultArray(resultCount, 4) = refLigne3
            
            ' Voie complète = pas de borne
            If estComplete Then
                resultArray(resultCount, 5) = ""
            Else
                resultArray(resultCount, 5) = borneFinal
            End If
            
            resultArray(resultCount, 6) = refLibelleDistrict
            resultArray(resultCount, 7) = refTournee
            resultArray(resultCount, 8) = refSecable
            resultArray(resultCount, 9) = refSamedi
        End If
    Next j
End Sub

Sub TrouverMinMaxRapide(ByRef arr As Variant, ByVal count As Long, ByRef minVal As Long, ByRef maxVal As Long)
    If count = 0 Then Exit Sub
    
    minVal = arr(1)
    maxVal = arr(1)
    
    Dim i As Long
    For i = 2 To count
        If arr(i) < minVal Then minVal = arr(i)
        If arr(i) > maxVal Then maxVal = arr(i)
    Next i
End Sub

Sub TriRapideMultiColonne(ByRef arr As Variant, ByVal bas As Long, ByVal haut As Long, ByVal col1 As Long, ByVal col2 As Long)
    ' Tri rapide optimisé pour 2 colonnes
    If bas < haut Then
        Dim pivot As Long
        pivot = PartitionnerRapide(arr, bas, haut, col1, col2)
        Call TriRapideMultiColonne(arr, bas, pivot - 1, col1, col2)
        Call TriRapideMultiColonne(arr, pivot + 1, haut, col1, col2)
    End If
End Sub

Function PartitionnerRapide(ByRef arr As Variant, ByVal bas As Long, ByVal haut As Long, ByVal col1 As Long, ByVal col2 As Long) As Long
    Dim pivotVal1 As String, pivotVal2 As String
    pivotVal1 = arr(haut, col1)
    pivotVal2 = arr(haut, col2)
    
    Dim i As Long
    i = bas - 1
    
    Dim j As Long
    For j = bas To haut - 1
        Dim comp As Boolean
        comp = (arr(j, col1) < pivotVal1) Or (arr(j, col1) = pivotVal1 And arr(j, col2) <= pivotVal2)
        
        If comp Then
            i = i + 1
            Call EchangerLignes(arr, i, j)
        End If
    Next j
    
    Call EchangerLignes(arr, i + 1, haut)
    PartitionnerRapide = i + 1
End Function

Sub EchangerLignes(ByRef arr As Variant, ByVal i As Long, ByVal j As Long)
    If i = j Then Exit Sub
    
    Dim k As Long
    For k = 1 To UBound(arr, 2)
        Dim temp As Variant
        temp = arr(i, k)
        arr(i, k) = arr(j, k)
        arr(j, k) = temp
    Next k
End Sub
